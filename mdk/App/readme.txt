本文档可以帮助解决移植过程中可能遇到的障碍,以及介绍每个文件配置的由来。

/*****************************************************
				1. NXP环境搭建
*****************************************************/
该部分主要围绕MCUXpresso Config Tools的使用来建立一个基本的芯片配置。

在main函数中主要体现在

	BOARD_InitPins();
	BOARD_InitBootClocks();
InitPins是初始化芯片引脚的函数，InitBootClocks是初始化芯片时钟的函数。

具体的芯片设置，可以通过MCUXpresso Config Tools导入该工程查看。



/*****************************************************
				2. 项目工程中间件
*****************************************************/
	在本工程RTE中可以查看使用使用的中间件,主体如下:
	
		Board Support：使用MCUXpresso Config Tools工具必须组件
		CMSIS_RTOS：   RTX操作系统组件
		Graphics：     emwinGUI组件
		
	还有一些外扩组件，来源官方开发例程，主体如下:
	
		touch panal:   触摸面板组件
		sdcard:        SD卡组件
		Fatfs：	       文件系统组件



/*****************************************************
				3. 程序应用层主体
*****************************************************/

   mcuconfig： 存放了LCD以及I2C的初始化文件
   GUI：       存放了界面设计的文件，该文件有GUIBuilder生成
   app：       存放了主要进程任务
   
 
 
/***************************************************
				4. 移植注意事项
****************************************************/
在C文件中的预置宏定义如下：
DEBUG, CPU_LPC54608, CPU_LPC54608J512ET180=1,USE_RTOS=1,DEV_MMC=1
USE_RTOS:表示SD卡的使用一个操作系统定时器
DEV_MMC：表示SD卡使用的硬件驱动号

在GUI_X_RTE.c中需要修改void GUI_X_Init(void)函数一处如下
	do
		GUI_TimerId = osTimerCreate(osTimer(GUI_Timer), osTimerPeriodic, NULL);
	while(GUI_TimerId != NULL);

原函数是直接创建一个定时器，这里申请有时候失败，所以增加一个循环。


/***************************************************
				5. 例子使用说明
****************************************************/
本项目主要进程如下
main进程：负责芯片的配置以及GUI的任务，这是因为芯片配置和GUI的任务栈都比较大，
          所以合在一个进程中了。

touch_thread进程：负责触摸的任务，包括触摸的初始化反以及触摸事件的反馈。

File_Systemp_check进程：负责SD卡的初始化以及文件系统的建立。能检测SD卡的拔出
						和插入,进行文件系统的注册和注销工作。
						
具体流程如下：
主函数芯片初始化后建立触摸进程和文件系统的进程。
当触摸进程触摸到按钮时,会自动从SDcard中读取一个文件
显示满个屏幕。SD卡中预置了1.dta,2.dta,3.dta,4.dta,
5.dta,6.dta,7.dta7个文件。

可以通过BmpCvt.exe替换这7个文件达到替换文件的效果,图片大小
最大为480*272。

所以实际效果是，每点一下按钮，读一个图片并显示到屏幕上。


/***************************************************
				5. 操作系统资源
****************************************************/
 进程共5个
	进程名            栈区大小        最大使用率
    main：             1200              96%
	touch_thread:      200               88% 
	File_check_thread  200               32%
	osTimerThread      200               16%
	os_idle_demon      200               32%
	
 定时器共2个
    sdmmc_timer_id     SD卡定时使用
	GUI_TimerId        GUI定时使用
	
    